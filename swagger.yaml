openapi: 3.0.0
servers:
  - description: API principale
    url: https://larche.ovh
info:
  description: API d'application de réservation de logements
  version: "1.0.0"
  title: L'Arche Api
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Utilisateurs et Authentification
    description: Section liée aux routes utilisateurs
  - name: Administration
    description: Section réservée aux administrateurs
  - name: Appartements
    description: Section liée aux routes appartements
  - name : Reservation
    description: Section liée aux routes reservations
paths:
  /login:
    post:
      tags:
        - "Utilisateurs et Authentification"
      summary:
        Permet de se connecter et de générer un JWT
      description: "Grâce aux données envoyées, connecte l'utilisateur et lui génère un JWT"
      requestBody:
        description: Pseudo et mot de passe
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/login'
      
      responses:
        "200":
          description: "Connecté"
          content:
            application/json:
              schema:
                type: object
                example: {"message": "success", jwt: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"}
        "403":
          description: "Connection échouée"
          content:
            application/json:
              schema:
                type: object
                example: {"error": "Connection échouée"}
  /register:
    post: 
      tags:
        - "Utilisateurs et Authentification"
      summary: "Permet de s'inscrire"
      description: Grâce aux données envoyées, inscrit l'utilisateur et lui génère un JWT par la même occasion
      requestBody:
        description: Pseudo, mot de passe, email, nom, prénom
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/register'
      
      responses:
        "200":
          description: "Inscrit"
          content:
            application/json:
              schema:
                type: object
                example: {"message": "success", jwt: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"}
        "403":
          description: "Inscription échouée, Données envoyées incorrectes"
          content:
            application/json:
              schema:
                type: object
                example: {"error": "Inscription échouée"}
  /me:
    get:
      summary: Profil de l'utilisateur
      description: Renvoit le profil de l'utilisateur connecté
      tags:
        - "Utilisateurs et Authentification"
      security:
        - jwtAuth: [admin]
        - authJwt: [admin]
        - jwtAuth:
            - read
            - write
      responses:
        "200":
          description: "Affichage de l'utilisateur"
          content:
            application/json:
              schema:
                type: object
                example: {"message": "logged", user: {"id": 1,"username": "john01","name": "John","lastname": "Doe","rank": "user","email": "john.doe@mail.com"}}
        "403":
          description: ""
          content:
            application/json:
              schema:
                type: object
                example: {"error": "Vous n'êtes pas autorisé à appeler l'API."}
  /users:
    get:
      summary: Récupérer les utilisateurs
      description: Renvoie la liste des utilisateurs (Nécessite d'être admin)
      tags:
        - Administration
      security:
        - jwtAuth:
            - read
            - write
      responses:
        "200":
          description: Renvoit la liste des utilisateurs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        "500":
          description: Erreur interne
  /users/{id}:
    get:
      summary: Récupérer un utilisateur
      description: Renvoit le profil d'un utilisateur identifié par son ID
      tags:
        - Administration
      security:
        - jwtAuth:
            - read
            - write
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to get
      responses:
        "200":
          description: Renvoit le profil d'un utilisateur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        "500":
          description: Erreur interne
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorGetUser'
  /apparts:
    get:
      tags:
        - Appartements
      summary: Permet de récupérer tous les appartements.
      description: Aucun paramètres à mettre ni besoin d'être login.
      responses:
        '200':
          description: Appartements récupérés
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllApparts'
        '400':
          description: Erreur lors de la récupération des logements
          content:
            application/json:
              schema:
                type: object
                example: {"error": "Erreur lors de la récupération des appartements"}
        "403":
          description: ""
          content:
            application/json:
              schema:
                type: object
                example: {"error": "Vous n'êtes pas autorisé à appeler l'API."}
    post:
      tags:
        - Appartements
      summary: Créer un appartement
      description: Permet à un utilisateur de faire une demande pour publier son logement sur la plateforme, doit être validé par un admin pour que le logement soit visible et pour que l'utilisateur ai le grade owner
      requestBody:
        description: owner, title, address, status, price, area, nb_rooms, max_people, startDate, endDate
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/createAppart'
      responses:
        '201':
          description: Demande de création de location envoyée
          content:
            application/json:
              schema: 
                type: object
                example: {"message": "success", "info" :{"lien":"https://larche.ovh/apparts/:id", "method": "GET"}}
        '400':
          description: paramètres incorrectes
          content:
            application/json:
              schema: 
                type: object
                example: {"error": "Une erreur est survenue lors de la création de l'appartement"}
        '500':
          description: paramètres manquants
          content:
            application/json:
              schema: 
                type: object
                example: {"error": "Une erreur est survenue lors de la création du logement"}
  /apparts/{id}:              
    delete:
      tags:
        - Appartements
      summary: Supprimer un appartement
      description: Suppression physique d'un appartements.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            items:
              type: integer
      responses:
        '200':
          description: Suppression réussie
          content:
            application/json:
              schema:
                type: object
                example: {"message": "Logement supprimé"}
        '403':
          description: Vous n'êtes pas le propriètaire
          content:
            application/json:
              schema:
                type: object
                example: {"error": "Vous n'êtes pas le propriétaire de cet appartement"}
    patch:
      tags:
        - Appartement
      summary: Editer un paramètre d'un appartement
      description: Mettre dans le body les paramètres à modifier
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            items:
              type: integer
      responses:
        '200':
          description: Suppression réussie
          content:
            application/json:
              schema:
                type: object
                example: {"message": {"message": "Logement édité","info": {"lien": "http://larche.ovh/apparts/29","method": "GET"}}}
        '403':
          description: Permission refusée
          content:
            application/json:
              schema:
                type: object
                example: {"error": "Permission refusée"}

  /apparts/validate/{id}:
    patch:
      tags:
        - Appartements
      summary: Valider un appartement
      description: Passe le status de "en attente" à "dispo".
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            items:
              type: integer
      responses:
        '200':
          description: Appartement édité
          content:
            application/json:
              schema:
                type: object
                example: {"message": {"message": "Logement validé","info": {"lien": "http://larche.ovh/apparts/36","method": "GET"}}}
        '403':
          description: Vous n'êtes pas administrateur
          content:
            application/json:
              schema:
                type: object
                example: {"error": "Vous n'avez pas les droits nécessaires"}
        '500':
          description: Une erreur est survenue
          content:
            application/json:
              schema:
                type: object
                example: {"error": "Une erreur est survenue durant la validation du logement"}

  /apparts/search/by?params=value:
    get:
      tags:
        - Appartements
      summary: Permet de récupérer des appartements en fonction de certains paramètres.
      description: tous les paramètres des appartements peuvent être renseignés.
      responses:
        '200':
          description: Appartements récupérés
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAppartsByParams'
        '400':
          description: Erreur lors de la récupération des logements
          content:
            application/json:
              schema:
                type: object
                example: {"error": "Erreur lors de la récupération des appartements"}
        "403":
          description: "Pas d'autorisation à utiliser l'API"
          content:
            application/json:
              schema:
                type: object
                example: {"error": "Vous n'êtes pas autorisé à appeler l'API."}
  /reservation:
    post: 
      tags: 
        - Reservation
      summary: Créer une réservation
      description: Permet à un utilisateur de réserver un appartement entre deux dates spécifiées
      requestBody:
        description: clientId, appartId, startDate, endDate, status
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/reservation'
      responses : 
        '200':
          description: Réservation éffectuée
          content:
            application/json:
              schema:
                type: object
                example: {"message": "Logement réservé", "viewReservation:": {"lien": "https://larche.ovh/reservation/2","method": "GET"}}
        '400':
          description: Données manquantes ou valeurs fausses
          content:
            application/json:
              schema:
                type: object
                example: {"error": "Date manquante ou non identifiée"}
        '500':
          description: ""
          content:
            application/json:
              schema:
                type: object
                example: {"error": "Une erreur est survenue durant la création de la réservation"}
  /reservation/{id}:
    get: 
      tags: 
        - Reservation
      summary: "Récupérer une réservation"
      description: Permet à un utilisateur de récupérer une reservation
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            items:
              type: integer
      responses : 
        '200':
          description: Récupération éffectuée
          content:
            application/json:
              schema:
                type: object
                example: {"id": 19,"clientId": 5,"appartId": 2,"startDate": "2024-02-01 00:00:00","endDate": "2024-02-06 00:00:00","status": "CANCELED"}
        '500':
          description: ""
          content:
            application/json:
              schema:
                type: object
                example: {"error": "Erreur durant la récupération de la reservation"}
    patch:
      tags: 
      - Reservation
      summary: modification des dates de résarvation
      description: Permet à un utilisateur de modifier la date de début ou la date de fin de la réservation
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            items:
              type: integer
      requestBody:
        description: startDate, endDate
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/reservationPatch/'
      responses:
        '200':
          description: Annulation de la réservation réussie
          content:
            application/json:
              schema:
                type: object
                example: {"message": "Réservation modifiée","infos": { "link": "http://localhost:8081/reservation/10","method": "GET"}}
        '500':
          description: Annulation de la réservation réussie
          content:
            application/json:
              schema:
                type: object
                example: {"error": "Appartement non disponible"}
  /reservation/cancel: 
    patch:
      tags:
        - Reservation
      summary: Modifier le status d'une reservation donnée
      description: Mettre dans le body l'id de la réservation à modifier
      requestBody:
        description: idReservation
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/reservationCancel'
      responses:
        '200':
          description: Annulation de la réservation réussie
          content:
            application/json:
              schema:
                type: object
                example: {"message" : "Reservation annulée", "info": {"link": "https://larche.ovh/reservation/19", "method": "GET"}}
        '400':
          description: Annulation de la réservation impossible car l'utilisateur n'a pas les droits
          content:
            application/json:
              schema:
                type: object
                example: {"error": "Impossible d'annuler la réservation"}
        '500': 
          description: Annulation de la réservation impossible 
          content:
            application/json:
              schema:
                type: object
                example: {"error": "Erreur durant l'annulation de la réservation"}
    



  


components:
  securitySchemes:
    authJwt: 
      type: http
      scheme: jwt
    jwtAuth:
      type: apiKey
      in: header
      name: Authorization
  schemas:
    errorGetUser:
      type: object
      properties:
        error:
          type: string
          example: "Une erreur est survenue durant la récupération du user"
    user:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username: 
          type: string
          example: "john01"
        name:
          type: string
          example: "John"
        lastname:
          type: string
          example: "Doe"
        rank:
          type: string
          example: "user"
        email:
          type: string
          example: "john.doe@gmail.com"
    users:
      type: object
      properties:
        users:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/user'
              - $ref: '#/components/schemas/user'
    login:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "john"
        password: 
          type: string
          example: J0hnP4ssw0r1d
    register:
      type: object
      required:
        - username
        - email
        - password
        - name
        - lastname
      properties:
        username:
          type: string
          example: "john"
        password:
          type: string
          example: "azeeakeKZPEKAElr!"
        name:
          type: string
          example: "John"
        lastname:
          type: string
          example: "Doe"
        email:
          type: string
          example: "john.doe@mail.com"
    createAppart:
      type: object
      required:
        - owner
        - title
        - address
        - status
        - price
        - area
        - nb_rooms
        - max_people
        - startDate
        - endDate        
      properties:
        owner:
          type: integer
          example: 1
        title: 
          type: string
          example: Appartement parisien
        address:
          type: string
          example: "12 rue de ..."
        status: 
          type: string
          example: "en attente"
        price:
          type: integer
          example: 172 181
        area: 
          type: integer
          example: 127
        nb_rooms:
          type: integer
          example: 4
        max_people: 
          type: integer
          example: 4
        startDate:
          type: string
          example: "2024-03-15 00:00:00"
        endDate: 
          type: string
          example: "2024-03-15 00:00:00"
    reservation:
      type: object
      required:
        - clientId
        - appartId
        - startDate
        - endDate
        - status
      properties:
        clientId:
          type: integer
          example: 6
        appartId: 
          type: integer
          example: 1
        startDate: 
          type: string
          example: "2024-01-08 00:00:00"
        endDate: 
          type: string
          example: "2024-05-08 00:00:00"
        status: 
          type: string
          example: BOOKED
    reservationCancel:
      type: object
      required:
        - idReservation
      properties:
        idReservation:
          type: integer
          example: 19
    reservationPatch:
      type: object
      properties:
        startDate: 
          type: string
          example: "2024-01-08 00:00:00"
        endDate: 
          type: string
          example: "2024-05-08 00:00:00"



    getAllApparts:
      type: object
      required:
        - count
        - apparts
          - appart
      properties:
        count:
          type: integer
          example: 2
        apparts:
          type: array
          items: 
              oneOf:
                - $ref: '#/components/schemas/getAppart'
                - $ref: '#/components/schemas/getAppart'

    getAppartsByParams:
          type: object
          required:
            - apparts
              - appart
          properties:
            apparts:
              type: array
              items: 
                  oneOf:
                    - $ref: '#/components/schemas/getAppart'
                    - $ref: '#/components/schemas/getAppart'
          
    getAppart:
      type: object
      required:
        - id
        - owner
        - title
        - address
        - status
        - price
        - area
        - nb_rooms
        - max_people
        - spec
        - link
      properties:
        id:
          type: integer
          example: 1
        owner:
          type: integer
          example: 2
        title:
          type: string
          example: Bel appartement parisien
        address:
          type: string
          example: quoicoucaca au sucre
        status:
          type: string
          example: en attente
        price:
          type: integer
          example: 147
        area:
          type: integer
          example: 99
        nb_rooms:
          type: integer
          example: 3
        max_people:
          type: integer
          example: 4
        spec:
          $ref: '#/components/schemas/spec'
        link:
          $ref: '#/components/schemas/link'
    
    spec:
      type: object
      required:
        - idAppart
        - wifi
        - parking
        - childAdapted
        - balcon
        - smoker
      properties:
        idAppart:
          type: integer
          example: 1
        wifi:
          type: integer
          example: 0
        parking:
          type: integer
          example: 1
        childAdapted:
          type: integer
          example: 1
        balcon:
          type: integer
          example: 0
        smoker:
          type: integer
          example: 1
    link:
      type: object
      required:
        - link
        - method
      properties:
        link:
          type: string
          example: 'https://larche.ovh/apparts/:id'
        method:
          type: string
          example: GET